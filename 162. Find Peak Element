class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        // if right nbro is small and lft nbr is also small then return [o(n)];
        //we will move in the direction of grt elemnet and for every element we chk if it is peak element or not {log n}
        
        int low=0;
        int high= nums.size()-1;
        
        if(nums.size()==1)return 0;
        else if(nums[0]>nums[1])return 0;
        else if(nums[high]>nums[high-1])return high;
        
        
        while(low <= high){
            int mid = low+(high-low)/2;

            if((mid==0 || nums[mid-1] < nums[mid] )&& (mid == nums.size()-1 ||nums[mid] >nums[mid+1]))return mid;

            if(nums[mid+1]>nums[mid]){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return 0;
    }
};
